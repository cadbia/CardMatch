name: CI/CD Pipeline for CardMatch

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
  
jobs:
  test:
    runs-on: ubuntu-latest
    services:
      mongodb:
        image: mongo:latest
        ports:
          - 27017:27017
        options: >-
          --health-cmd "echo 'db.runCommand(\"ping\").ok' | mongosh localhost:27017/test --quiet"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: npm install

      - name: Install ESLint and React plugins
        run: |
          npm install --save-dev eslint-plugin-react eslint-plugin-react-hooks eslint-plugin-react-refresh @typescript-eslint/eslint-plugin @typescript-eslint/parser

      - name: Run tests
        env:
          MONGODB_URI: mongodb://localhost:27017/cardmatch
        run: npm test
      
      - name: Run ESLint
        run: npm run lint

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: npm install

      - name: Build frontend
        run: npm run build

  deploy-staging:
    needs: build
    runs-on: ubuntu-latest
    services:
      mongodb:
        image: mongo:latest
        ports:
          - 27017:27017
        options: >-
          --health-cmd "echo 'db.runCommand(\"ping\").ok' | mongosh localhost:27017/test --quiet"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: npm install

      - name: Deploy to Staging
        env:
          MONGODB_URI: mongodb://localhost:27017/cardmatch
          JWT_SECRET: ${{ secrets.STAGING_JWT_SECRET }}
        run: |
          npm run build
          npm run server &

  deploy-production:
    needs: deploy-staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    services:
      mongodb:
        image: mongo:latest
        ports:
          - 27017:27017
        options: >-
          --health-cmd "echo 'db.runCommand(\"ping\").ok' | mongosh localhost:27017/test --quiet"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: npm install

      - name: Deploy to Production
        env:
          MONGODB_URI: mongodb://localhost:27017/cardmatch
          JWT_SECRET: ${{ secrets.PRODUCTION_JWT_SECRET }}
        run: |
          npm run build
          npm run server &

  rollback:
    runs-on: ubuntu-latest
    needs: deploy-production
    if: failure()
    services:
      mongodb:
        image: mongo:latest
        ports:
          - 27017:27017
        options: >-
          --health-cmd "echo 'db.runCommand(\"ping\").ok' | mongosh localhost:27017/test --quiet"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get Previous Stable Tag
        id: get-tag
        run: |
          git fetch --tags
          PREVIOUS_TAG=$(git describe --tags --abbrev=0)
          echo "Previous stable tag: $PREVIOUS_TAG"
          echo "PREVIOUS_TAG=$PREVIOUS_TAG" >> $GITHUB_ENV

      - name: Rollback to Previous Version
        env:
          MONGODB_URI: mongodb://localhost:27017/cardmatch
          JWT_SECRET: ${{ secrets.PRODUCTION_JWT_SECRET }}
        run: |
          git checkout $PREVIOUS_TAG
          npm install
          npm run build
          npm run server &